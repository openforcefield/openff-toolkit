name: Examples

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 4 * * *"

defaults:
  run:
    shell: bash -l {0}

jobs:
  test:
    if: (github.event_name == 'schedule' && github.repository == 'openforcefield/openff-toolkit') || (github.event_name != 'schedule')
    name: ${{ matrix.os }}, Python ${{ matrix.python-version }}, RDKit=${{ matrix.rdkit }}, OpenEye=${{ matrix.openeye }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.11", "3.12"]
        rdkit: [true, false]
        openeye: [true, false]
        exclude:
          - rdkit: false
            openeye: false
          - rdkit: true
            openeye: true

    env:
      OE_LICENSE: ${{ github.workspace }}/oe_license.txt
      PACKAGE: openff
      PYTEST_ARGS: -r fE -v -x --tb=short -nauto --durations=10
      NB_ARGS: --nbval-lax --dist loadscope --ignore=examples/deprecated

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set environment variables
        run: |
          if [[ ${{ matrix.openeye }} == true && ${{ matrix.rdkit }} == false ]]; then
              echo "ENVFILE=openeye" >> $GITHUB_ENV
              echo "TOOLKIT_CHECKS=OPENEYE" >> $GITHUB_ENV
              echo "PACKAGES_TO_REMOVE=ambertools rdkit" >> $GITHUB_ENV
          fi

          if [[ ${{ matrix.openeye }} == false && ${{ matrix.rdkit }} == true ]]; then
              echo "ENVFILE=rdkit" >> $GITHUB_ENV
              echo "TOOLKIT_CHECKS=RDKIT" >> $GITHUB_ENV
              echo "PACKAGES_TO_REMOVE=openeye-toolkits" >> $GITHUB_ENV
          fi

      - name: Install conda environment with ${{ env.ENVFILE }}
        uses: mamba-org/setup-micromamba@v2
        with:
          environment-file: devtools/conda-envs/${{env.ENVFILE}}-examples.yaml
          create-args: >-
            python=${{ matrix.python-version }}

      - name: Make oe_license.txt file from GH org secret "OE_LICENSE"
        env:
          OE_LICENSE_TEXT: ${{ secrets.OE_LICENSE }}
        run: echo "${OE_LICENSE_TEXT}" > ${OE_LICENSE}

      - name: Install package
        run: python -m pip install .

      - name: Remove undesired toolkits
        run: |
          # If openmmforcefields is included in either environment file,
          # remove RDKit and AmberTools brought in by it. Currently it's not included,
          # so don't remove it.
          if [ ! -z "${{ env.PACKAGES_TO_REMOVE }}" ]; then
            for cpkg in ${{ env.PACKAGES_TO_REMOVE }}; do
              if [[ $(micromamba list | grep $cpkg) ]]; then micromamba remove --force $cpkg --yes ; fi
            done
          fi

      - name: Check installed toolkits
        run: |
          for tk in ${{ env.TOOLKIT_CHECKS }}; do
            python -c "from openff.toolkit.utils.toolkits import ${tk}_AVAILABLE; assert ${tk}_AVAILABLE, '${tk} unavailable'"
          done

      - name: Check uninstalled toolkits
        run: |
          if [ ! -z "${{ env.PACKAGES_TO_REMOVE }}" ]; then
            for tk in ${{ env.PACKAGES_TO_REMOVE }}; do
              TK=$(echo ${tk%-*} | tr 'a-z' 'A-Z')
              python -c "from openff.toolkit.utils.toolkits import ${TK}_AVAILABLE; assert not ${TK}_AVAILABLE, '${TK} available'"
            done
          fi

      - name: Environment Information
        run: |
          micromamba info
          micromamba list
          pip list

        # See https://github.com/openforcefield/openff-units/issues/111
        # for more or better solution - possibly not needed when links are checked
        # before a parallel pytest run
      - name: Shim for `pytest-xdist` + Pint cross-interaction
        run: python -c "from openff.toolkit import *"

      - name: Run code snippets in docs
        if: ${{ matrix.openeye == true && matrix.rdkit == true }}
        run: pytest -v --doctest-glob="docs/*.rst" --doctest-glob="docs/*.md" docs/

      - name: Run notebooks in docs
        if: ${{ matrix.openeye == true && matrix.rdkit == true }}
        run: python -m pytest -v --nbval-lax docs/

      - name: Run examples in docstrings
        if: ${{ matrix.openeye == true && matrix.rdkit == true }}
        run: |
          pytest openff \
            -v -x -n logical --doctest-modules \
            --ignore-glob='openff/toolkit/_tests*' \
            --ignore=openff/toolkit/data/ \
            --ignore=openff/toolkit/utils/utils.py

      - name: Run example scripts
        run: |
          if [[ ${{ matrix.rdkit }} == false ]]; then
            PYTEST_ARGS+=" --ignore=examples/check_dataset_parameter_coverage"
            PYTEST_ARGS+=" --ignore=examples/QCArchive_interface"
          fi
          pytest $PYTEST_ARGS openff/toolkit/_tests/test_examples.py

      - name: Run example notebooks
        run: |
          if [[ ${{ matrix.rdkit }} == false ]]; then
            NB_ARGS+=" --ignore=examples/QCArchive_interface"
            NB_ARGS+=" --ignore=examples/visualization"
            NB_ARGS+=" --ignore=examples/check_dataset_parameter_coverage"
            NB_ARGS+=" --ignore=examples/conformer_energies"
            NB_ARGS+=" --ignore=examples/using_smirnoff_in_amber_or_gromacs"
            NB_ARGS+=" --ignore=examples/using_smirnoff_with_amber_protein_forcefield"
            NB_ARGS+=" --ignore=examples/SMIRNOFF_simulation"
            NB_ARGS+=" --ignore=examples/toolkit_showcase"
          fi

          # GROMACS builds are not stable on macOS + GHA
          if [[ ${{ matrix.os }} == macos-latest ]]; then
            NB_ARGS+=" --ignore=examples/using_smirnoff_in_amber_or_gromacs/"
          fi

          python -m pytest $PYTEST_ARGS $NB_ARGS examples
